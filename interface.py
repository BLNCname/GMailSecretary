import os
import re
from datetime import datetime
from typing import List, Dict, Optional

from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Initialize bot and dispatcher
bot = Bot(token=('7646882683:AAF2DvdkSx7Fgn8gndjZWFpw8x8VUDnWFhk'))
dp = Dispatcher()

# Mock data storage for emails (in a real app, you'd use a database)
user_emails = {}
user_auth = {}

# States
class AuthState(StatesGroup):
    waiting_for_url = State()

class DateRangeState(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()

class SenderState(StatesGroup):
    waiting_for_sender = State()

class EmailSelectionState(StatesGroup):
    waiting_for_email_selection = State()

class SummaryState(StatesGroup):
    waiting_for_email_to_summarize = State()

class ImportanceState(StatesGroup):
    waiting_for_importance_level = State()

class TemplateState(StatesGroup):
    waiting_for_email_to_template = State()
    waiting_for_template_text = State()

# Helper functions
def create_email_list_keyboard(emails: List[Dict], page: int = 0, page_size: int = 5) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # Add email selection buttons
    for i, email in enumerate(emails[page*page_size:(page+1)*page_size], start=page*page_size):
        builder.add(InlineKeyboardButton(
            text=f"{i+1}. {email['subject']}",
            callback_data=f"select_email_{i}"
        ))
    
    # Add pagination if needed
    if len(emails) > page_size:
        row = []
        if page > 0:
            row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è Previous",
                callback_data=f"email_page_{page-1}"
            ))
        if (page+1)*page_size < len(emails):
            row.append(InlineKeyboardButton(
                text="Next ‚û°Ô∏è",
                callback_data=f"email_page_{page+1}"
            ))
        builder.row(*row)
    
    return builder.as_markup()

def get_main_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üìÖ –ü–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–∞ –ø–æ –¥–∞—Ç–µ")],
        [KeyboardButton(text="üë§ –ü–∏—Å—å–º–∞ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")],
        [KeyboardButton(text="üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ")],
        [KeyboardButton(text="‚ùó –ü–∏—Å—å–º–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# Handlers
@dp.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –†–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–≤–æ–µ–π –ø–æ—á—Ç–æ–π\n"
        "- –ß–∏—Ç–∞—Ç—å –ø–∏—Å—å–º–∞ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö\n"
        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∏—Å–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏\n"
        "- –ü–æ–ª—É—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å–µ–º\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
    )
    
    auth_button = InlineKeyboardButton(
        text="üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è",
        url="https://example.com/auth"  # Replace with your actual auth URL
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[auth_button]])
    
    instructions = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "3. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç URL –≤ —ç—Ç–æ—Ç —á–∞—Ç"
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)
    await message.answer(instructions)
    await message.answer("–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.")

@dp.message(F.text.contains("http") & AuthState.waiting_for_url)
async def process_auth_url(message: Message, state: FSMContext):
    # Here you would normally process the auth URL and verify it
    # For this example, we'll just assume it's valid
    
    user_auth[message.from_user.id] = {
        "auth_token": "mock_token",
        "email": "user@example.com"
    }
    
    await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", reply_markup=get_main_keyboard())
    await state.clear()

# Date range emails
@dp.message(F.text == "üìÖ –ü–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–∞ –ø–æ –¥–∞—Ç–µ")
async def request_date_range(message: Message, state: FSMContext):
    if message.from_user.id not in user_auth:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(DateRangeState.waiting_for_start_date)

@dp.message(DateRangeState.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(start_date=start_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        await state.set_state(DateRangeState.waiting_for_end_date)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@dp.message(DateRangeState.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    try:
        end_date = datetime.strptime(message.text, "%d.%m.%Y")
        data = await state.get_data()
        start_date = data['start_date']
        
        # Here you would normally fetch emails from your email service
        # For this example, we'll use mock data
        mock_emails = [
            {"id": i, "subject": f"–ü–∏—Å—å–º–æ {i}", "sender": "sender@example.com", "date": start_date, "content": f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ {i}"}
            for i in range(1, 11)
        ]
        
        user_emails[message.from_user.id] = mock_emails
        
        if not mock_emails:
            await message.answer("–ü–∏—Å–µ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())
            await state.clear()
            return
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=create_email_list_keyboard(mock_emails))
        await state.set_state(EmailSelectionState.waiting_for_email_selection)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

# Sender emails
@dp.message(F.text == "üë§ –ü–∏—Å—å–º–∞ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
async def request_sender(message: Message, state: FSMContext):
    if message.from_user.id not in user_auth:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
    await state.set_state(SenderState.waiting_for_sender)

@dp.message(SenderState.waiting_for_sender)
async def process_sender(message: Message, state: FSMContext):
    sender_email = message.text.strip()
    
    # Here you would normally fetch emails from your email service
    # For this example, we'll use mock data
    mock_emails = [
        {"id": i, "subject": f"–ü–∏—Å—å–º–æ –æ—Ç {sender_email} {i}", "sender": sender_email, "date": datetime.now(), "content": f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ {i}"}
        for i in range(1, 6)
    ] if sender_email == "known@example.com" else []
    
    if not mock_emails:
        await message.answer(f"–ü–∏—Å–µ–º –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_email} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π email.")
        return
    
    user_emails[message.from_user.id] = mock_emails
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=create_email_list_keyboard(mock_emails))
    await state.set_state(EmailSelectionState.waiting_for_email_selection)

# Email summary
@dp.message(F.text == "üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ")
async def request_email_to_summarize(message: Message, state: FSMContext):
    if message.from_user.id not in user_auth:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    # Here you would normally fetch emails from your email service
    # For this example, we'll use mock data
    mock_emails = [
        {"id": i, "subject": f"–ü–∏—Å—å–º–æ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ {i}", "sender": "sender@example.com", "date": datetime.now(), "content": f"–≠—Ç–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ {i}, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤."}
        for i in range(1, 6)
    ]
    
    user_emails[message.from_user.id] = mock_emails
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å—å–º–æ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=create_email_list_keyboard(mock_emails))
    await state.set_state(SummaryState.waiting_for_email_to_summarize)

@dp.callback_query(SummaryState.waiting_for_email_to_summarize, F.data.startswith("select_email_"))
async def summarize_email(callback: types.CallbackQuery, state: FSMContext):
    email_index = int(callback.data.split("_")[-1])
    emails = user_emails.get(callback.from_user.id, [])
    
    if not emails or email_index >= len(emails):
        await callback.answer("–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    selected_email = emails[email_index]
    
    # Here you would normally call your summarization AI
    summary = f"–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ '{selected_email['subject']}':\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n1. –ü–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç\n2. –í—Ç–æ—Ä–æ–π –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç\n3. –¢—Ä–µ—Ç–∏–π –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç"
    
    await callback.message.answer(summary, reply_markup=get_main_keyboard())
    await state.clear()
    await callback.answer()

# Importance filter
@dp.message(F.text == "‚ùó –ü–∏—Å—å–º–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏")
async def request_importance_level(message: Message, state: FSMContext):
    if message.from_user.id not in user_auth:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –í–∞–∂–Ω–æ–µ", callback_data="importance_high")],
        [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–µ–µ", callback_data="importance_medium")],
        [InlineKeyboardButton(text="üîµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="importance_low")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
    await state.set_state(ImportanceState.waiting_for_importance_level)

@dp.callback_query(ImportanceState.waiting_for_importance_level, F.data.startswith("importance_"))
async def show_emails_by_importance(callback: types.CallbackQuery, state: FSMContext):
    importance = callback.data.split("_")[-1]
    
    # Here you would normally fetch emails from your email service filtered by importance
    # For this example, we'll use mock data
    mock_emails = [
        {"id": i, "subject": f"{importance.capitalize()} –≤–∞–∂–Ω–æ—Å—Ç—å –ø–∏—Å—å–º–æ {i}", "sender": "sender@example.com", "date": datetime.now(), "content": f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ {importance} –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∏—Å—å–º–∞ {i}"}
        for i in range(1, 6)
    ]
    
    user_emails[callback.from_user.id] = mock_emails
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=create_email_list_keyboard(mock_emails))
    await state.set_state(EmailSelectionState.waiting_for_email_selection)
    await callback.answer()

# Response template
@dp.message(F.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞")
async def request_email_for_template(message: Message, state: FSMContext):
    if message.from_user.id not in user_auth:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    # Here you would normally fetch emails from your email service
    # For this example, we'll use mock data
    mock_emails = [
        {"id": i, "subject": f"–ü–∏—Å—å–º–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ {i}", "sender": "sender@example.com", "date": datetime.now(), "content": f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ {i}"}
        for i in range(1, 6)
    ]
    
    user_emails[message.from_user.id] = mock_emails
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å—å–º–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞:", reply_markup=create_email_list_keyboard(mock_emails))
    await state.set_state(TemplateState.waiting_for_email_to_template)

@dp.callback_query(TemplateState.waiting_for_email_to_template, F.data.startswith("select_email_"))
async def create_response_template(callback: types.CallbackQuery, state: FSMContext):
    email_index = int(callback.data.split("_")[-1])
    emails = user_emails.get(callback.from_user.id, [])
    
    if not emails or email_index >= len(emails):
        await callback.answer("–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    selected_email = emails[email_index]
    await state.update_data(selected_email=selected_email)
    
    await callback.message.answer(
        f"–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏—Å—å–º–æ: '{selected_email['subject']}'\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞:"
    )
    await state.set_state(TemplateState.waiting_for_template_text)
    await callback.answer()

@dp.message(TemplateState.waiting_for_template_text)
async def save_response_template(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_email = data['selected_email']
    
    # Here you would normally save the template
    template_text = message.text
    
    await message.answer(
        f"–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–∏—Å—å–º–∞ '{selected_email['subject']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n"
        f"{template_text}",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

# Email selection handler (shared for multiple states)
@dp.callback_query(EmailSelectionState.waiting_for_email_selection, F.data.startswith("select_email_"))
async def show_selected_email(callback: types.CallbackQuery, state: FSMContext):
    email_index = int(callback.data.split("_")[-1])
    emails = user_emails.get(callback.from_user.id, [])
    
    if not emails or email_index >= len(emails):
        await callback.answer("–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    selected_email = emails[email_index]
    
    email_text = (
        f"–û—Ç: {selected_email['sender']}\n"
        f"–î–∞—Ç–∞: {selected_email['date'].strftime('%d.%m.%Y %H:%M')}\n"
        f"–¢–µ–º–∞: {selected_email['subject']}\n\n"
        f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{selected_email['content']}"
    )
    
    await callback.message.answer(email_text, reply_markup=get_main_keyboard())
    await state.clear()
    await callback.answer()

# Pagination handler
@dp.callback_query(F.data.startswith("email_page_"))
async def handle_email_pagination(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[-1])
    emails = user_emails.get(callback.from_user.id, [])
    
    if not emails:
        await callback.answer("–ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    await callback.message.edit_reply_markup(reply_markup=create_email_list_keyboard(emails, page))
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())